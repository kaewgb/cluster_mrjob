import unittest
import itertools
import sys
import math
import timeit
import copy
import time
import struct
import os.path
import getopt
import h5py

from cluster_map import ClusterMRJob
from mrjob.protocol import PickleProtocol as protocol

    
def print_usage():
        print """    ---------------------------------------------------------------------
    Speaker Diarization in Python with Asp and the GMM Specializer usage:
    ---------------------------------------------------------------------
    Arguments for the diarizer are parsed from a config file. 
    Default config file is diarizer.cfg, but you can pass your own file with the '-c' option. 
    Required is the config file header: [Diarizer] and the options are as follows:
    
    --- Required: ---
    basename: \t Basename of the file to process
    mfcc_feats: \t MFCC input feature file
    output_cluster: \t Output clustering file
    gmm_output: \t Output GMMs parameters file
    M_mfcc: \t Amount of gaussains per model for mfcc
    initial_clusters: Number of initial clusters

    --- Optional: ---
    spnsp_file: \t spnsp file (all features used by default)
    KL_ntop: \t Nuber of combinations to evaluate BIC on
            \t 0 to deactive KL-divergency (fastmatch-component)
    em_iterations: \t Number of iterations for the standard
                  \t segmentation loop training (3 by default)
    num_seg_iters_init: \t Number of majority vote iterations
                        \t in the initialization phase (2 by default)
    num_seg_iters: \t Number of majority vote iterations
                   \t in the main loop (3 by default)
    seg_length: \t Segment length for majority vote in frames
                \t (250 frames by default)

    For fastest performance, enable KL-divergency (KL_ntop = 3) and set
      \t num_seg_iters_init and num_seg_iters to 1
    """

    
def print_no_config():

    print "Please supply a config file with -c 'config_file_name.cfg' "
    return

def preprocess(names):
    tuples = map(lambda(x): (x, os.path.getsize('/u/drspeech/data/Aladdin/corpora/trecvid2011/events/'+x+'.htk')), names)
    return map(lambda(name, size): name, sorted(tuples, key=lambda(x): x[1], reverse=True))

if __name__ == '__main__':
    mr_args = ['-v', '--strict-protocols', '-r', 'hadoop','--input-protocol', 'pickle','--output-protocol','pickle','--protocol','pickle']
    #10
    meeting_names = ['E001/HVC006045', 'E001/HVC006184', 'E001/HVC011409', 'E001/HVC022974', 'E001/HVC026971', 'E001/HVC027850', 'E001/HVC029485', 'E001/HVC031151', 'E001/HVC032158', 'E001/HVC036790']
#    #25
#    meeting_names = ['E001/HVC006045', 'E001/HVC006184', 'E001/HVC011409', 'E001/HVC022974', 'E001/HVC026971', 'E001/HVC027850', 'E001/HVC029485', 'E001/HVC031151', 'E001/HVC032158', 'E001/HVC036790', 'E001/HVC040785', 'E001/HVC042692', 'E001/HVC049437', 'E001/HVC064215', 'E001/HVC067270', 'E001/HVC068504', 'E001/HVC087057', 'E001/HVC090414', 'E001/HVC091740', 'E001/HVC095303', 'E001/HVC098807', 'E001/HVC103302', 'E001/HVC103932', 'E001/HVC105766', 'E001/HVC108320']
#    #50
#    meeting_names = ['E001/HVC006045', 'E001/HVC006184', 'E001/HVC011409', 'E001/HVC022974', 'E001/HVC026971', 'E001/HVC027850', 'E001/HVC029485', 'E001/HVC031151', 'E001/HVC032158', 'E001/HVC036790', 'E001/HVC040785', 'E001/HVC042692', 'E001/HVC049437', 'E001/HVC064215', 'E001/HVC067270', 'E001/HVC068504', 'E001/HVC087057', 'E001/HVC090414', 'E001/HVC091740', 'E001/HVC095303', 'E001/HVC098807', 'E001/HVC103302', 'E001/HVC103932', 'E001/HVC105766', 'E001/HVC108320', 'E001/HVC109456', 'E001/HVC123288', 'E001/HVC134406', 'E001/HVC134634', 'E001/HVC146032', 'E001/HVC148793', 'E001/HVC152448', 'E001/HVC169936', 'E001/HVC174999', 'E001/HVC198184', 'E001/HVC201655', 'E001/HVC203988', 'E001/HVC218344', 'E001/HVC218765', 'E001/HVC240490', 'E001/HVC243157', 'E001/HVC255452', 'E001/HVC257987', 'E001/HVC259599', 'E001/HVC263724', 'E001/HVC268521', 'E001/HVC271903', 'E001/HVC283780', 'E001/HVC292292', 'E001/HVC293678']
#    #100
#    meeting_names
#    #250
#    meeting_names = ['E001/HVC006045', 'E001/HVC006184', 'E001/HVC011409', 'E001/HVC022974', 'E001/HVC026971', 'E001/HVC027850', 'E001/HVC029485', 'E001/HVC031151', 'E001/HVC032158', 'E001/HVC036790', 'E001/HVC040785', 'E001/HVC042692', 'E001/HVC049437', 'E001/HVC064215', 'E001/HVC067270', 'E001/HVC068504', 'E001/HVC087057', 'E001/HVC090414', 'E001/HVC091740', 'E001/HVC095303', 'E001/HVC098807', 'E001/HVC103302', 'E001/HVC103932', 'E001/HVC105766', 'E001/HVC108320', 'E001/HVC109456', 'E001/HVC123288', 'E001/HVC134406', 'E001/HVC134634', 'E001/HVC146032', 'E001/HVC148793', 'E001/HVC152448', 'E001/HVC169936', 'E001/HVC174999', 'E001/HVC198184', 'E001/HVC201655', 'E001/HVC203988', 'E001/HVC218344', 'E001/HVC218765', 'E001/HVC240490', 'E001/HVC243157', 'E001/HVC255452', 'E001/HVC257987', 'E001/HVC259599', 'E001/HVC263724', 'E001/HVC268521', 'E001/HVC271903', 'E001/HVC283780', 'E001/HVC292292', 'E001/HVC293678', 'E001/HVC298568', 'E001/HVC309504', 'E001/HVC317804', 'E001/HVC319297', 'E001/HVC319600', 'E001/HVC320560', 'E001/HVC334254', 'E001/HVC359216', 'E001/HVC362146', 'E001/HVC364230', 'E001/HVC365963', 'E001/HVC377296', 'E001/HVC396658', 'E001/HVC397279', 'E001/HVC398674', 'E001/HVC402970', 'E001/HVC403628', 'E001/HVC417926', 'E001/HVC418407', 'E001/HVC425927', 'E001/HVC429818', 'E001/HVC434449', 'E001/HVC450989', 'E001/HVC460343', 'E001/HVC462262', 'E001/HVC462508', 'E001/HVC463620', 'E001/HVC467645', 'E001/HVC468477', 'E001/HVC473973', 'E001/HVC479361', 'E001/HVC486704', 'E001/HVC498099', 'E001/HVC499900', 'E001/HVC506183', 'E001/HVC507955', 'E001/HVC513054', 'E001/HVC515040', 'E001/HVC516366', 'E001/HVC520461', 'E001/HVC528762', 'E001/HVC528929', 'E001/HVC529613', 'E001/HVC532992', 'E001/HVC532993', 'E001/HVC539647', 'E001/HVC541506', 'E001/HVC542481', 'E001/HVC549861', 'E001/HVC553302', 'E001/HVC561733', 'E001/HVC562777', 'E001/HVC570651', 'E001/HVC573643', 'E001/HVC579741', 'E001/HVC591147', 'E001/HVC597104', 'E001/HVC602688', 'E001/HVC605240', 'E001/HVC606315', 'E001/HVC615626', 'E001/HVC616948', 'E001/HVC620320', 'E001/HVC631691', 'E001/HVC637907', 'E001/HVC646345', 'E001/HVC652043', 'E001/HVC658517', 'E001/HVC672564', 'E001/HVC676565', 'E001/HVC680956', 'E001/HVC681821', 'E001/HVC682794', 'E001/HVC683835', 'E001/HVC687278', 'E001/HVC690639', 'E001/HVC699748', 'E001/HVC705168', 'E001/HVC707236', 'E001/HVC711253', 'E001/HVC717615', 'E001/HVC718274', 'E001/HVC719228', 'E001/HVC726373', 'E001/HVC730049', 'E001/HVC730081', 'E001/HVC733376', 'E001/HVC742499', 'E001/HVC749106', 'E001/HVC766498', 'E001/HVC776608', 'E001/HVC786536', 'E001/HVC788532', 'E001/HVC789034', 'E001/HVC792251', 'E001/HVC803719', 'E001/HVC811971', 'E001/HVC822060', 'E001/HVC823377', 'E001/HVC823657', 'E001/HVC829585', 'E001/HVC834162', 'E001/HVC836424', 'E001/HVC846668', 'E001/HVC878334', 'E001/HVC881736', 'E001/HVC883718', 'E001/HVC887091', 'E001/HVC888814', 'E001/HVC891523',
#                     'E002/HVC013188', 'E002/HVC021844', 'E002/HVC027840', 'E002/HVC027879', 'E002/HVC028378', 'E002/HVC043460', 'E002/HVC050106', 'E002/HVC053039', 'E002/HVC055040', 'E002/HVC056946', 'E002/HVC057164', 'E002/HVC057244', 'E002/HVC067449', 'E002/HVC070937', 'E002/HVC075150', 'E002/HVC080067', 'E002/HVC081166', 'E002/HVC084897', 'E002/HVC087496', 'E002/HVC090118', 'E002/HVC090439', 'E002/HVC092481', 'E002/HVC110256', 'E002/HVC114107', 'E002/HVC115550', 'E002/HVC117893', 'E002/HVC118292', 'E002/HVC121841', 'E002/HVC127982', 'E002/HVC131494', 'E002/HVC132114', 'E002/HVC148914', 'E002/HVC164420', 'E002/HVC168889', 'E002/HVC188853', 'E002/HVC192860', 'E002/HVC198167', 'E002/HVC200173', 'E002/HVC217227', 'E002/HVC232523', 'E002/HVC237868', 'E002/HVC239317', 'E002/HVC240101', 'E002/HVC240983', 'E002/HVC244418', 'E002/HVC256062', 'E002/HVC274889', 'E002/HVC280004', 'E002/HVC284062', 'E002/HVC284420', 'E002/HVC291067', 'E002/HVC297552', 'E002/HVC302964', 'E002/HVC305398', 'E002/HVC317191', 'E002/HVC318186', 'E002/HVC319130', 'E002/HVC329241', 'E002/HVC330358', 'E002/HVC330734', 'E002/HVC331229', 'E002/HVC331444', 'E002/HVC333068', 'E002/HVC333217', 'E002/HVC337634', 'E002/HVC337743', 'E002/HVC342710', 'E002/HVC357788', 'E002/HVC358793', 'E002/HVC371186', 'E002/HVC372625', 'E002/HVC378891', 'E002/HVC381000', 'E002/HVC381541', 'E002/HVC385947', 'E002/HVC386562', 'E002/HVC397476', 'E002/HVC406511', 'E002/HVC419946', 'E002/HVC425921', 'E002/HVC426636', 'E002/HVC448233', 'E002/HVC450975', 'E002/HVC454146', 'E002/HVC461207', 'E002/HVC468846', 'E002/HVC505164', 'E002/HVC508446', 'E002/HVC518505', 'E002/HVC524155'
#    ] 
    meeting_names = preprocess(meeting_names)
    print "Processing {0} input files".format(len(meeting_names))
    task_args = [protocol.write(name, None)+"\n" for name in meeting_names]
    
    start = time.time()
    job = ClusterMRJob(args=mr_args).sandbox(stdin=task_args)
    runner = job.make_runner()        
    runner.run()
#    kv_pairs = map(job.parse_output_line, runner.stream_output())
#    keys = map(lambda(k, v): k, kv_pairs)
#    print "Returned keys:", keys
#    return map(lambda(k, v): v, kv_pairs)
    print "Tasks done. Total execution time:", time.time()-start, "seconds."


